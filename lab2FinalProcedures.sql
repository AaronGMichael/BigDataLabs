-- CREATE OR REPLACE PROCEDURE EMP_SALARY_GIVE_RAISES(in_EMP_ID NUMERIC)
-- LANGUAGE plpgsql
-- AS $procedure$
-- DECLARE
-- 	R_EMP EMP%ROWTYPE;
-- 	AVG_SAL NUMERIC;
-- 	NEW_SAL INTEGER := 0;
-- BEGIN
-- 	SELECT * INTO R_EMP FROM EMP WHERE EMPNO = in_EMP_ID;
-- 	SELECT AVG(sal) INTO AVG_SAL FROM EMP WHERE job = R_EMP.job;
-- 	IF R_EMP.sal >= AVG_SAL THEN
-- 		NEW_SAL = R_EMP.sal + ceil(R_EMP.sal::decimal * 10/100);
-- 	ELSE
-- 		NEW_SAL = AVG_SAL::INTEGER;
-- 	END IF;
-- 	UPDATE EMP SET SAL = NEW_SAL WHERE EMPNO = R_EMP.empno;
-- 	RAISE NOTICE 'Employee name: %, Old Salary: %, New Salary: %',
-- 	R_EMP.EFIRST, R_EMP.SAL, NEW_SAL;
-- 	RAISE NOTICE 'Average Salary of % Job: %', R_EMP.job, AVG_SAL;
-- EXCEPTION
-- 	WHEN OTHERS THEN
-- 	RAISE NOTICE 'SQL ERROR OF QUERY: %', SQLERRM;
-- END;
-- $procedure$

-- CREATE OR REPLACE PROCEDURE CREATEBONUSES()
-- LANGUAGE plpgsql
-- AS $procedure$
-- DECLARE
-- 	ONE_EMP EMP%ROWTYPE;
-- 	BONUS NUMERIC;
-- 	EMPLOYEE CURSOR FOR SELECT * FROM EMP;
-- BEGIN
-- 	-- opening the cursor
-- 	OPEN EMPLOYEE;
-- 	-- Looping the Cursor
-- 	LOOP
-- 		FETCH EMPLOYEE into ONE_EMP;
-- 		EXIT WHEN NOT FOUND;
-- 		-- USAGE
-- 		IF ONE_EMP.job = 'SALESMAN' THEN
-- 			BONUS = ONE_EMP.comm * 2;
-- 		ELSIF ONE_EMP.job = 'CLERK' THEN
-- 			BONUS = 
-- 		ELSE
-- 			BONUS = 0;
-- 		END IF;
-- 		RAISE NOTICE 'EMPLOYEE NO: %, SALARY: %, JOB: %,COMMISION: %', ONE_EMP.EMPNO, ONE_EMP.SAL, ONE_EMP.job,BONUS;
-- 	END LOOP;
-- -- 	COMMIT;
-- 	-- Closing the cursor
-- 	CLOSE EMPLOYEE;
-- END;
-- $procedure$


CREATE OR REPLACE PROCEDURE HIGHESTANDLOWESTSALS()
LANGUAGE plpgsql
AS $procedure$
DECLARE
	ONE_EMP EMP%ROWTYPE;
	EMPLOYEE CURSOR FOR SELECT * FROM EMP ORDER BY SAL DESC LIMIT 5;
	EMPLOYEE2 CURSOR FOR SELECT * FROM EMP ORDER BY SAL LIMIT 5;
BEGIN
	-- opening the cursor
	OPEN EMPLOYEE;
	RAISE NOTICE '5 Highest Salaries:';
	-- Looping the Cursor
	LOOP
		FETCH EMPLOYEE into ONE_EMP;
		EXIT WHEN NOT FOUND;
		-- USAGE
		RAISE NOTICE 'EMPLOYEE NO: %, EMPLOYEE NAME: % %, SALARY: %', ONE_EMP.EMPNO, ONE_EMP.ENAME, ONE_EMP.EFIRST,ONE_EMP.SAL;
	END LOOP;
-- 	COMMIT;
	-- Closing the cursor
	CLOSE EMPLOYEE;
	OPEN EMPLOYEE2;
	RAISE NOTICE '5 Lowest Salaries';
	LOOP
		FETCH EMPLOYEE2 into ONE_EMP;
		EXIT WHEN NOT FOUND;
		RAISE NOTICE 'EMPLOYEE NO: %, EMPLOYEE NAME: % %, SALARY: %', ONE_EMP.EMPNO, ONE_EMP.ENAME, ONE_EMP.EFIRST,ONE_EMP.SAL;
	END LOOP;
	CLOSE EMPLOYEE2;
END;
$procedure$


